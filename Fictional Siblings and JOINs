/* This code focuses on the use of JOINs. */ 

/* Creates a table that displays the characters' names and occupations. */
CREATE TABLE characters (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT, occupation TEXT);
INSERT INTO characters (name, occupation) VALUES
('Barok van Zieks', 'prosecutor'),
('Ema Skye', 'forensic scientist'),
('Klavier Gavin', 'prosecutor'),
('Klint van Zieks', 'prosecutor'),
('Kristoph Gavin', 'defense attorney'),
('Lana Skye', 'prosecutor'),
('Maya Fey', 'spirit medium'),
('Mia Fey', 'defense attorney');

/* Creates a table that displays the characters represented by their corresponding number from the "characters" table, the first game they appeared in, the year the game was published, and the characters' last known status. */
CREATE TABLE games (id INTEGER PRIMARY KEY AUTOINCREMENT, character_id INTEGER, first_appearance TEXT, year INTEGER, last_known_status TEXT);
INSERT INTO games (character_id, first_appearance, year, last_known_status) VALUES
(1, 'The Great Ace Attorney: Adventures', 2015,  'alive'),
(2, 'Phoenix Wright: Ace Attorney', 2001, 'alive'),
(3, 'Apollo Justice: Ace Attorney', 2007, 'alive'),
(4, 'The Great Ace Attorney 2: Resolve', 2017, 'deceased'),
(5, 'Apollo Justice: Ace Attorney', 2007, 'incarcerated'),
(6, 'Phoenix Wright: Ace Attorney', 2001, 'arrested'),
(7, 'Phoenix Wright: Ace Attorney', 2001, 'alive'),
(8, 'Phoenix Wright: Ace Attorney', 2001, 'deceased');

/* Creates a table listing the characters who are siblings next to each other, represented by their corresponding number from the "characters" table. */
CREATE TABLE siblings (id INTEGER PRIMARY KEY AUTOINCREMENT, sib1_id INTEGER, sib2_id INTEGER);
INSERT INTO siblings (sib1_id, sib2_id) VALUES
(8, 7),
(6, 2),
(5, 3),
(4, 1);

/* Displays each character's name next to the game they first appeared in and the year the game was published. Sorted by the year game was published in ascending order. */
SELECT c.name, g.first_appearance, g.year
FROM characters AS c
JOIN games AS g
ON c.id = g.character_id
ORDER BY g.year;

/* Displays the characters who are siblings in the same row, along with their last known status. */
SELECT cha.name AS older_sibling, ga.last_known_status, ra.name AS younger_sibling, me.last_known_status
FROM siblings AS s
JOIN characters AS cha
ON cha.id = s.sib1_id
JOIN characters AS ra
ON ra.id = s.sib2_id
JOIN games AS ga
ON ga.character_id = s.sib1_id
JOIN games AS me
ON me.character_id = s.sib2_id;

/* Shows the siblings who have or had the same occupation, along with said occupation. */
SELECT cha.name AS older_sibling, ct.occupation, ra.name AS younger_sibling, ers.occupation
FROM siblings AS s
JOIN characters AS cha
ON cha.id = s.sib1_id
JOIN characters AS ra
ON ra.id = s.sib2_id
JOIN characters AS ct
ON ct.id = s.sib1_id
JOIN characters AS ers
ON ers.id = s.sib2_id
WHERE ct.occupation = ers.occupation;
